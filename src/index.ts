/**
 * Welcome to Cloudflare Workers! This is your first worker.
 *
 * - Run `npm run dev` in your terminal to start a development server
 * - Open a browser tab at http://localhost:8787/ to see your worker in action
 * - Run `npm run deploy` to publish your worker
 *
 * Bind resources to your worker in `wrangler.toml`. After adding bindings, a type definition for the
 * `Env` object can be regenerated by running `npm run cf-typegen`.
 *
 * Learn more at https://developers.cloudflare.com/workers/
 */

// Definisci gli origin permessi. Per maggiore sicurezza, specifica solo il tuo dominio AlterVista.
// Usa '*' solo per test, ma non è raccomandato in produzione.
const ALLOWED_ORIGIN = 'https://eremofratefrancesco.altervista.org';

// Funzione helper per aggiungere le intestazioni CORS
function addCorsHeaders(response: Response): Response {
  response.headers.set('Access-Control-Allow-Origin', ALLOWED_ORIGIN);
  response.headers.set('Access-Control-Allow-Methods', 'POST, OPTIONS'); // Metodi permessi
  response.headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization'); // Intestazioni permesse
  // response.headers.set('Access-Control-Max-Age', '86400'); // Opzionale: per quanto tempo il browser può cachare la risposta preflight
  return response;
}

export default {
  async fetch(request: Request, env: Env, ctx: ExecutionContext): Promise<Response> {
    // Gestione della richiesta preflight OPTIONS
    if (request.method === 'OPTIONS') {
      const headers = new Headers();
      headers.set('Access-Control-Allow-Origin', ALLOWED_ORIGIN);
      headers.set('Access-Control-Allow-Methods', 'POST, OPTIONS');
      headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization');
      // headers.set('Access-Control-Max-Age', '86400'); // Cache preflight per 1 giorno
      return new Response(null, { status: 204, headers });
    }

    if (request.method !== 'POST') {
      let response = new Response('Expected POST request', { status: 405 });
      return addCorsHeaders(response); // Aggiungi header CORS anche alle risposte di errore
    }

    let inputs;
    try {
      const requestData = await request.json();
      if (!requestData.prompt || typeof requestData.prompt !== 'string' || requestData.prompt.trim() === '') {
        let response = new Response(JSON.stringify({ success: false, error: 'Prompt is missing or invalid in request body' }), {
          status: 400,
          headers: { 'Content-Type': 'application/json' },
        });
        return addCorsHeaders(response);
      }
      inputs = {
        prompt: requestData.prompt + ", icon style, simple vector, clean lines, on a white background",
      };
    } catch (e) {
      let response = new Response(JSON.stringify({ success: false, error: 'Invalid JSON in request body' }), {
        status: 400,
        headers: { 'Content-Type': 'application/json' },
      });
      return addCorsHeaders(response);
    }

    try {
      console.log(`Worker AI: Ricevuto prompt: ${inputs.prompt}`);
      const imageResponseBlob = await env.AI.run(
        "@cf/stabilityai/stable-diffusion-xl-base-1.0",
        inputs
      );

      let response = new Response(imageResponseBlob, {
        headers: {
          "content-type": "image/png",
        },
      });
      return addCorsHeaders(response); // Aggiungi header CORS alla risposta con l'immagine

    } catch (e: any) {
      console.error("Cloudflare Worker AI Model Run Error:", e);
      let response = new Response(JSON.stringify({ success: false, error: `Error running AI model: ${e.message || e.toString()}` }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' },
      });
      return addCorsHeaders(response);
    }
  },
} satisfies ExportedHandler<Env>;
